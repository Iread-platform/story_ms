stages:
  - deploy
  - build
  - publish
  - build_docker_image_and_push_on_docker_hub


variables:
  DOCKER_USER_NAME: "yazankassamcodavia"
  DOCKER_PASSWORD: "yazankassamcod@v!@"
  DOCKER_ORGANIZATION_NAME: "iread"
  DOCKER_IMAGE_NAME: "story_ms"
  CONTAINER_PORT: "5010"



deploy:
  stage: deploy
  image: alpine
  only:
    - develop
    - master
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - echo "$SSH_PRIVATE_KEY"
    - ssh -o StrictHostKeyChecking=no root@46.227.254.20 "cd ~; touch test4.txt"
    ## REMOVE CURRENT CNTAINER IF EXISTS
    - ssh -o StrictHostKeyChecking=no root@46.227.254.20 "docker ps -q --filter ancestor=${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME} | grep -q . && docker stop ${DOCKER_IMAGE_NAME} && docker rm -fv ${DOCKER_IMAGE_NAME} || echo Not Found Container With Name = ${DOCKER_IMAGE_NAME} ;"
    ## REMOVE CURRENT VERSION OF IMAGE IF EXISTS
    - ssh -o StrictHostKeyChecking=no root@46.227.254.20 "docker images -q --filter reference=${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME} | grep -q . && docker rmi $(docker images ${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME} -a -q) || echo Not Found Image With Name = ${DOCKER_IMAGE_NAME} ;"



  
build:
  stage: build
  only:
    - develop
    - master
  image : mcr.microsoft.com/dotnet/sdk:5.0
  script:
    - dotnet build

publish:
  stage: publish
  only:
    - develop
    - master
  image : mcr.microsoft.com/dotnet/sdk:5.0
  artifacts:
    paths:
      - publish/
  script:
    - dotnet publish -o ./publish


dockerize_develop:
  stage: build_docker_image_and_push_on_docker_hub
  only:
    - develop
  image: docker:latest
  services:
    - docker:dind
  script:
    - export DOCKER_IMAGE_VER=$(printf "%03d" $CI_PIPELINE_IID | sed 's/.\{1\}/&./g' | sed 's/.$//')
    - echo "DOCKER IMAGE VERION = $DOCKER_IMAGE_VER"
    - docker build -f Dockerfile -t "${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VER}" .
    - docker login --username $DOCKER_USER_NAME --password $DOCKER_PASSWORD
    - docker push "${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VER}"
    - echo "DOCKER_IMAGE_AND_TAG=${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VER}" >> build.env
  artifacts:
    reports:
      dotenv: build.env


dockerize_master:
  stage: build_docker_image_and_push_on_docker_hub
  only:
    - master
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add jq
  script:
    - export DOCKER_IMAGE_VER=release-$(jq -r .Release appsettings.json)
    - echo "DOCKER IMAGE VERION = $DOCKER_IMAGE_VER"
    - docker build -f Dockerfile -t "${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VER}" .
    - docker login --username $DOCKER_USER_NAME --password $DOCKER_PASSWORD
    - docker push "${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VER}"
    - echo "DOCKER_IMAGE_AND_TAG=${DOCKER_ORGANIZATION_NAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VER}" >> build.env
  artifacts:
    reports:
      dotenv: build.env







